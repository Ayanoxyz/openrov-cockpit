<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="viewport" content="width=device-width">
    <title><%= title %></title>
        <link href="css/bootstrap.min.css" rel="stylesheet">
        <link href="css/bootstrap-responsive.css" rel="stylesheet">        
        <link rel="stylesheet" href="themes/OpenROV/css/style.css">
        <link href="css/ui-lightness/jquery-ui-1.8.23.custom.css" rel="stylesheet" />
    <% for(var i=0; i<styles.length; i++) {%>
    <link rel="stylesheet" href="<%= styles[i] %>"><% } %>
  </head>
  <script>

  </script>
        <script type='text/javascript' src="js/libs/jquery.min.js"></script>
        <script type='text/javascript' src="js/libs/jquery-ui.min.js"></script>
        <script type='text/javascript' src="js/libs/bootstrap.min.js"></script>
        <script type='text/javascript' src="js/libs/mousetrap.min.js"></script>
        <script type='text/javascript' src='js/libs/knockout-2.1.0.js'></script>
	<script type='text/javascript' src='js/libs/gamepad.js'></script>
        <script type='text/javascript' src='js/utilities.js'></script>
        <script type='text/javascript' src='js/ArduinoFirmwareViewModel.js'></script>
        <script type='text/javascript' src='js/OpenRovViewModel.js'></script>
        <script type='text/javascript' src="js/gamepad.js"></script>
        <script type='text/javascript' src="js/keypad.js"></script>
        <script type='text/javascript' src="js/frame.js"></script>
	<script type='text/javascript' src="js/cockpit.js"></script>
	<!--script type='text/javascript' src="js/compass.js"></script-->
	<script src='js/libs/db.js'></script>
	<script type='text/javascript' src="js/blackbox.js"></script>
	<script type='text/javascript' src="js/horizon.js"></script>
        <script src="/config.js"></script>
	<script src="/socket.io/socket.io.js"></script>

  <% for(var i=0; i<scripts.length; i++) {%>
  <script type="text/javascript" src="<%= scripts[i] %>"></script><% } %>

  <body>
        <div class="navbar navbar-inverse navbar-fixed-top">
          <div class="navbar-inner">
            <div id="menu" class="container-fluid">
              <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </a>
              <p><a class="brand" href="#"><img src="themes/OpenROV/img/logo.png" class="logo"/>&nbsp;Cockpit</a></p>
              <div class="nav-collapse collapse">
                <ul id="menuitems" class="nav pull-right">
                  <li><a href="#" id="show-settings">Settings</a></li>
                  <li><a href="#" id="show-diagnostic">Diagnostic</a></li>
                </ul>
              </div><!--/.nav-collapse -->
            </div>
          </div>
        </div>
        
        <!-- Main ROW -->
        <div id="main-row" class="container-fluid full-height">
          <div class="row-fluid full-height">
            <div class="span9 border full-height" id="outher-videocontainer">
              <div id="video-container" class="center" border='1'>
                <img src="themes/OpenROV/img/no_camera.jpg" alt="OpenROV" id="video"/>

              </div>
            </div>
            <div id="rov_status_panel" class="span3 pull-right" style="overflow: auto; height: 100%">
                <div id="gamepad" class="controller well well-small" >
                    <img src="themes/OpenROV/img/gamepad.png" class="center">
                    <p>Use the <i>2 sticks</i> to maneuver.</p>
                </div>
                <div id="keyboard" class="controller well well-small" >
                    <img src="themes/OpenROV/img/keyboard.png" class="center">
                    <p>Use the <i>Up</i>, <i>Down</i>, <i>Left</i>, <i>Right</i>, <i>Shift</i> and <i>Ctrl</i> keys to maneuver. Use <i>1</i>-<i>5</i> to set power. <i>7</i>,<i>8</i> (lift) and <i>9</i>,<i>0</i> (thrust) trim. Space for all stop.</p>
                </div>
                <div id="servoTilt" class="controller well well-small" >
                    
                    <p>Use <i>Q</i>, <i>A</i>, <i>Z</i> to tilt servo.</p>
                </div>
                <div id="lights" class="controller well well-small" >

                    <p>Use <i>o</i>, <i>p</i> to increase brightness of lights.</p>
		    <p>Use <i>l</i> to toggle callibration lasers.</p>
                </div>

            </div>
          </div>
        </div>
        <div id="footer" class="navbar navbar-inverse navbar-fixed-bottom">

        </div>
	

        <!-- SETTINGS -->
        <div class="drop-in-right" id="settings">
          <div class="back-button"></div><h3>Settings</h3>
	    <h4>Runtime Settings:</h4>
	          <div class="control-group invisible-field">
		      <label class="control-label" for="smoothingIncriment">Motor Response Aggressivness:</label>
		      <!--input type="text" data-bind="value: smoothingIncriment" />
		      <div class="controls" data-bind="slider: smoothingIncriment, sliderOptions: { min: 1, max: 50, step: 1}"></div-->
		  </div>

	    </div>
          </div>
        </div>

        <div class="drop-in-right" id="diagnostic">
            <div class="back-button"></div><h3>Diagnostics</h3>
            <div class="settings-block">
                <h4>Pre-Flight Check</h4>
            </div>
	    <div class="settings-block">
	      <h4>Callibration</h4>
	      <a href="#" class="btn" id="callibrate_compass">Callibrate Compass</a>
	      <a href="#" class="btn" id="zero_depth">Zero Depth</a>	      
	    </div>

        </div>

        
        <!-- Le javascript
        ================================================== -->
        <!-- Placed at the end of the document so the pages load faster -->


	<script> //Load conditional js files
	  
	</script>

        <script>
      		var viewmodel;
          $(function() {
			
            //viewmodel = new OpenRovViewModel();
            //ko.applyBindings(viewmodel);

            var socket = io.connect();

	  /*  socket.on('rovsys', function(data) {
	      console.log('got rovsys update');
	      viewmodel.updateRovsys(data);
	      if (viewmodel.capabilities()>>COMPASS_CAPABLE & 1) {
		$.getScript("js/compass.js",function() {cockpit.loadPlugins();});		
		console.log("Compass code loaded");
	      }
	    })
*/

	    
	    
            /* ------------------------------------------
               settings 
            */
            var options = {};
	    var keyboard = null;
            $("#show-settings").click(function() { 
              $("#settings").show('fold');
	//      viewmodel.sendUpdateEnabled(false);
              Mousetrap.bind('esc', hideSettings);
	      keyboard.unbindKeys();
            });

            $("#settings .back-button").click(function() {
              hideSettings();
	      sendUpdateSettingMessage(socket,{smoothingIncriment:viewmodel.smoothingIncriment()});
            });	    

            function hideSettings() {
              $("#settings").hide('fold');
	//      viewmodel.sendUpdateEnabled(true);
              Mousetrap.unbind('esc');
	      keyboard.bindKeys()
            }
	    
              /* ------------------------------------------
               diagnostic
               */
              var options = {};
	      
	      
              $("#show-diagnostic").click(function() {
                  $("#diagnostic").show('fold');
                  viewmodel.sendUpdateEnabled(false);
                  Mousetrap.bind('esc', hideDiagnostic);
              });

              $("#diagnostic .back-button").click(function() {
                  hideDiagnostic();
              });    
	      
              function hideDiagnostic() {
                  $("#diagnostic").hide('fold');
                  viewmodel.sendUpdateEnabled(true);
                  Mousetrap.unbind('esc');
              }

 	      
	  $('#zero_depth').click(function() {
            socket.emit('depth_zero');
          });
	  
	  $('#callibrate_compass').click(function() {
            socket.emit('compass_callibrate');
          });
	  
	  $('#toggle_watertype').click(function() {
            socket.emit('depth_togglewatertype');
          });
	  
	  

            /* ------------------------------------------
               gamepad/keyboard 
            */
            var gp = new GamePad();
            var kp = new KeyPad();
	    keyboard = kp;
            var controller = kp;
	    
	    var detectcontroller = function(){
	      if(gp.isAvailable()) {
		  $("#keyboard").hide();
		  $("#gamepad").show();
		  controller = gp;
	      }
	      else { 
		  $("#gamepad").hide();
		  $("#keyboard").show();
		  controller = kp;
	      }	      
	    };

	    gp.bindDetectionEvent(function(){
	      detectcontroller();
	      console.log('binddetectionevent called');
	    });
	    
	    detectcontroller();

            kp.bindServoTilt(function (value){
               // viewmodel.currentTiltPosition(value);

                socket.emit('tilt_update',value);
            });
            
	    gp.bindServoTilt(function (value){
                //viewmodel.currentTiltPosition(value);
                socket.emit('tilt_update',value);
            });
	    
            kp.bindBrightness(function (value){
                viewmodel.updateBrightness(value);
                socket.emit('brightness_update',viewmodel.currentBrightness());
            });
	    
            kp.bindLasers(function (value){
                socket.emit('laser_update');
            });	    
	    
            gp.bindBrightness(function (value){
                viewmodel.updateBrightness(value);
                socket.emit('brightness_update',viewmodel.currentBrightness());
            });
	    
            var SAMPLE_PERIOD = 1000 / CONFIG.sample_freq; //ms
	    var priorControls = {};
            setInterval(function() {
              var positions = controller.getPositions();
	      var updateRequired = false;  //Only send if there is a change
              var controls = {};
              for(var i in positions) {
		controls[i] = positions[i];
		if (controls[i] != priorControls[i])
		{
		  updateRequired = true;
		}
	      }
	      
              /*if(CONFIG.debug) {
                console.error("DEBUG: throttle", controls.throttle);
                console.error("DEBUG: yaw", controls.yaw);
                console.error("DEBUG: lift", controls.lift);
              }*/
       /*       if(viewmodel.sendUpdateEnabled() && updateRequired){
                socket.emit('control_update', controls);
		priorControls = controls;
		console.log('update...');
	      }
	      */ 
            }, SAMPLE_PERIOD);

 
 
	    
	    //plugin hooks
            setupFrameHandling(socket);
	   var cockpit = new Cockpit(socket);
          });


	  
	  function sendUpdateSettingMessage(socket,setting) {
	    socket.emit('update_settings',setting);
	  }
	  


        </script>

    </body>


</html>
